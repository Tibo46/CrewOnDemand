// <auto-generated />
using System;
using CrewOnDemand.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrewOnDemand.Migrations
{
    [DbContext(typeof(CrewOnDemandContext))]
    [Migration("20200929172819_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrewOnDemand.Models.Base", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "munich"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "berlin"
                        });
                });

            modelBuilder.Entity("CrewOnDemand.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PilotId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CrewOnDemand.Models.Pilot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("Pilots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Andy"
                        },
                        new
                        {
                            Id = 2,
                            BaseId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Betty"
                        },
                        new
                        {
                            Id = 3,
                            BaseId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Callum"
                        },
                        new
                        {
                            Id = 4,
                            BaseId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Daphne"
                        },
                        new
                        {
                            Id = 5,
                            BaseId = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elvis"
                        },
                        new
                        {
                            Id = 6,
                            BaseId = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Freida"
                        },
                        new
                        {
                            Id = 7,
                            BaseId = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greg"
                        },
                        new
                        {
                            Id = 8,
                            BaseId = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hermione"
                        });
                });

            modelBuilder.Entity("CrewOnDemand.Models.WorkDay", b =>
                {
                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.HasKey("DayOfTheWeek", "PilotId");

                    b.HasIndex("PilotId");

                    b.ToTable("WorkDays");

                    b.HasData(
                        new
                        {
                            DayOfTheWeek = 1,
                            PilotId = 1
                        },
                        new
                        {
                            DayOfTheWeek = 2,
                            PilotId = 1
                        },
                        new
                        {
                            DayOfTheWeek = 4,
                            PilotId = 1
                        },
                        new
                        {
                            DayOfTheWeek = 6,
                            PilotId = 1
                        },
                        new
                        {
                            DayOfTheWeek = 1,
                            PilotId = 2
                        },
                        new
                        {
                            DayOfTheWeek = 2,
                            PilotId = 2
                        },
                        new
                        {
                            DayOfTheWeek = 3,
                            PilotId = 2
                        },
                        new
                        {
                            DayOfTheWeek = 5,
                            PilotId = 2
                        },
                        new
                        {
                            DayOfTheWeek = 3,
                            PilotId = 3
                        },
                        new
                        {
                            DayOfTheWeek = 4,
                            PilotId = 3
                        },
                        new
                        {
                            DayOfTheWeek = 6,
                            PilotId = 3
                        },
                        new
                        {
                            DayOfTheWeek = 0,
                            PilotId = 3
                        },
                        new
                        {
                            DayOfTheWeek = 5,
                            PilotId = 4
                        },
                        new
                        {
                            DayOfTheWeek = 6,
                            PilotId = 4
                        },
                        new
                        {
                            DayOfTheWeek = 0,
                            PilotId = 4
                        },
                        new
                        {
                            DayOfTheWeek = 1,
                            PilotId = 5
                        },
                        new
                        {
                            DayOfTheWeek = 2,
                            PilotId = 5
                        },
                        new
                        {
                            DayOfTheWeek = 4,
                            PilotId = 5
                        },
                        new
                        {
                            DayOfTheWeek = 6,
                            PilotId = 5
                        },
                        new
                        {
                            DayOfTheWeek = 1,
                            PilotId = 6
                        },
                        new
                        {
                            DayOfTheWeek = 2,
                            PilotId = 6
                        },
                        new
                        {
                            DayOfTheWeek = 3,
                            PilotId = 6
                        },
                        new
                        {
                            DayOfTheWeek = 5,
                            PilotId = 6
                        },
                        new
                        {
                            DayOfTheWeek = 3,
                            PilotId = 7
                        },
                        new
                        {
                            DayOfTheWeek = 4,
                            PilotId = 7
                        },
                        new
                        {
                            DayOfTheWeek = 6,
                            PilotId = 7
                        },
                        new
                        {
                            DayOfTheWeek = 0,
                            PilotId = 7
                        },
                        new
                        {
                            DayOfTheWeek = 5,
                            PilotId = 8
                        },
                        new
                        {
                            DayOfTheWeek = 6,
                            PilotId = 8
                        },
                        new
                        {
                            DayOfTheWeek = 0,
                            PilotId = 8
                        });
                });

            modelBuilder.Entity("CrewOnDemand.Models.Booking", b =>
                {
                    b.HasOne("CrewOnDemand.Models.Pilot", null)
                        .WithMany("Bookings")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrewOnDemand.Models.Pilot", b =>
                {
                    b.HasOne("CrewOnDemand.Models.Base", "Base")
                        .WithMany()
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrewOnDemand.Models.WorkDay", b =>
                {
                    b.HasOne("CrewOnDemand.Models.Pilot", "Pilot")
                        .WithMany("WorkDays")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
